{"version":3,"sources":["MessageBus.js","MessageBus.ts"],"names":["_createClass","defineProperties","target","props","key","prop","configurable","value","writable","Object","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","MessageBus","MessageBus_1","MessageBus.create","MessageBus.MessageBus","_this","this","MessageBus.MessageBus.constructor","MessageBus.MessageBus.close","MessageBus.MessageBus.on","MessageBus.MessageBus.off","MessageBus.MessageBus.emit","MessageBus.MessageBus._channelExists","MessageBus.MessageBus._onEvent"],"mappings":"AAAA,YAEA,IAAIA,cAAe,WAAe,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,KAAOD,GAAO,CAAE,GAAIE,GAAOF,EAAMC,EAAMC,GAAKC,cAAe,EAAUD,EAAKE,QAAOF,EAAKG,UAAW,GAAQC,OAAOR,iBAAiBC,EAAQC,GAAU,MAAO,UAAUO,EAAaC,EAAYC,GAAiJ,MAA9HD,IAAYV,EAAiBS,EAAYG,UAAWF,GAAiBC,GAAaX,EAAiBS,EAAaE,GAAqBF,MAEvaI,gBAAkB,SAAUC,EAAUL,GAAe,KAAMK,YAAoBL,IAAgB,KAAM,IAAIM,WAAU,sCCJhHC,YAAP,SAAOC,GAsHLD,QAAAA,GAAuBA,GACrBE,MAAOA,IAAIA,GAAWA,GD/GtB,GCIFF,GAAAA,WAWEG,QAXFH,GAWcG,GDPJ,GAAIC,GAAQC,IAEZR,iBAAgBQ,KCN1BL,GAEUM,KAAAA,aACAA,KAAAA,UAAwBA,KAU9BA,KAAKA,UAAYA,CAEjBA,IAAIA,GAAYA,SAAAA,GDHN,MCGWA,GAAKA,SAASA,EAAEA,KAAKA,KAAMA,EAAEA,KAAKA,UACnDA,EAAYA,SAAAA,GDDN,MCCWA,GAAKA,SAASA,QAASA,GAE5CA,GAASA,iBAAiBA,UAAWA,GACrCA,EAASA,iBAAiBA,QAASA,GAEnCA,KAAKA,UAAYA,WACfA,EAASA,oBAAoBA,UAAWA,GACxCA,EAASA,oBAAoBA,QAASA,IDsFtC,MApFAvB,cCzBNiB,GAgCEG,ODAYb,MCAPa,WACoBI,OAAnBA,KAAKA,WACPA,KAAKA,YAEPA,KAAKA,UAAYA,KACjBA,KAAKA,eASPJ,IDEYb,MCFVa,SAACA,EAAqBA,GACtBK,GAAIA,GAAQA,EAAKA,UACZA,MAAKA,eAAeA,KACvBA,KAAKA,UAAUA,OAEjBA,KAAKA,UAAUA,GAAOA,KAAKA,KAS7BL,KDIYb,MCJTa,SAACA,EAAqBA,GACvBM,GAAIA,GAAQA,EAAKA,UACjBA,IAAIA,KAAKA,eAAeA,GAAQA,CAC9BA,GAAIA,GAAUA,KAAKA,UAAUA,GACzBA,EAAUA,EAAQA,QAAQA,EAChBA,MAAVA,GACFA,EAAQA,OAAOA,EAAOA,MAW5BN,MDMYb,MCNRa,SAACA,EAAqBA,GACxBO,GAAIA,GAAQA,EAAKA,UACjBA,MAAKA,UAAUA,aACbA,KAASA,EACTA,QAASA,MAILP,gBDOIb,MCPUa,SAACA,GACrBQ,MAAOA,MAAKA,UAAUA,eAAeA,KAG/BR,UDQIb,MCRIa,SAACA,EAAcA,GAC7BS,GAAIA,KAAKA,eAAeA,GAGtBA,IAAKA,GAFDA,GAAYA,KAAKA,UAAUA,GAC3BA,EAASA,EAAUA,OACdA,EAAIA,EAAOA,EAAJA,EAAYA,IAC1BA,EAAUA,GAAGA,OA9FrBZ,IAAaA,GAAAA,WAAUA,EA0GPA,EAAAA,OAAMA,GAtHjBA,aAAAA","file":"MessageBus.js","sourcesContent":["\"use strict\";\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } };\n\nvar MessageBus;\n(function (MessageBus_1) {\n    var MessageBus = (function () {\n        /**\n         * Wrap an `Endpoint` and provide a pubsub interface.\n         *\n         * @param endpoint WebWorker endpoint\n         */\n\n        function MessageBus(endpoint) {\n            var _this = this;\n\n            _classCallCheck(this, MessageBus);\n\n            this._channels = {};\n            this._unlisten = null;\n            this._endpoint = endpoint;\n            var onMessage = function (e) {\n                return _this._onEvent(e.data.name, e.data.payload);\n            },\n                onError = function (e) {\n                return _this._onEvent(\"error\", e);\n            };\n            endpoint.addEventListener(\"message\", onMessage);\n            endpoint.addEventListener(\"error\", onError);\n            this._unlisten = function () {\n                endpoint.removeEventListener(\"message\", onMessage);\n                endpoint.removeEventListener(\"error\", onError);\n            };\n        }\n\n        _createClass(MessageBus, {\n            close: {\n                /**\n                 * Remove event listeners from supplied `Endpoint`\n                 * Delete all listeners from `MessageBus`\n                 */\n\n                value: function close() {\n                    if (this._unlisten !== null) {\n                        this._unlisten();\n                    }\n                    this._unlisten = null;\n                    this._channels = {};\n                }\n            },\n            on: {\n                /**\n                 * Listener on channel\n                 *\n                 * @param name Channel to listen on\n                 * @param listener Callback function\n                 */\n\n                value: function on(name, listener) {\n                    var sname = name.toString();\n                    if (!this._channelExists(sname)) {\n                        this._channels[sname] = [];\n                    }\n                    this._channels[sname].push(listener);\n                }\n            },\n            off: {\n                /**\n                 * Unlisten from channel\n                 *\n                 * @param name Channel to unlisten\n                 * @param listener Callback function\n                 */\n\n                value: function off(name, listener) {\n                    var sname = name.toString();\n                    if (this._channelExists(sname)) {\n                        var channel = this._channels[sname],\n                            index = channel.indexOf(listener);\n                        if (index !== -1) {\n                            channel.splice(index, 1);\n                        }\n                    }\n                }\n            },\n            emit: {\n                /**\n                 * Emit a message on a channel\n                 *\n                 * @param name Channel name\n                 * @param payload Message data\n                 */\n\n                value: function emit(name, payload) {\n                    var sname = name.toString();\n                    this._endpoint.postMessage({\n                        name: sname,\n                        payload: payload\n                    });\n                }\n            },\n            _channelExists: {\n                value: function _channelExists(name) {\n                    return this._channels.hasOwnProperty(name);\n                }\n            },\n            _onEvent: {\n                value: function _onEvent(name, payload) {\n                    if (this._channelExists(name)) {\n                        var listeners = this._channels[name];\n                        var _length = listeners.length;\n                        for (var i = 0; i < _length; i++) {\n                            listeners[i](payload);\n                        }\n                    }\n                }\n            }\n        });\n\n        return MessageBus;\n    })();\n\n    MessageBus_1.MessageBus = MessageBus;\n    /**\n     * Factory function for creating a `MessageBus`\n     *\n     * @param endpoint WebWorker endpoint\n     */\n    function create(endpoint) {\n        return new MessageBus(endpoint);\n    }\n    MessageBus_1.create = create;\n})(MessageBus || (MessageBus = {}));","module MessageBus {\n\n  export interface Endpoint {\n    postMessage(message: any): void;\n    addEventListener(type: string, listener: (ev: any) => any): any;\n    removeEventListener(type: string, listener: (ev: any) => any): any;\n  }\n\n  export interface Listener {\n    (payload?: any): any;\n  }\n\n  export class MessageBus {\n\n    private _channels: { [name: string]: Array<Listener> } = {};\n    private _unlisten: () => void = null\n    private _endpoint: Endpoint;\n\n    /**\n     * Wrap an `Endpoint` and provide a pubsub interface.\n     *\n     * @param endpoint WebWorker endpoint\n     */\n    constructor(endpoint: Endpoint) {\n\n      this._endpoint = endpoint;\n\n      let onMessage = e => this._onEvent(e.data.name, e.data.payload),\n          onError   = e => this._onEvent(\"error\", e);\n\n      endpoint.addEventListener(\"message\", onMessage);\n      endpoint.addEventListener(\"error\", onError);\n\n      this._unlisten = () => {\n        endpoint.removeEventListener(\"message\", onMessage);\n        endpoint.removeEventListener(\"error\", onError);\n      };\n\n    }\n\n    /**\n     * Remove event listeners from supplied `Endpoint`\n     * Delete all listeners from `MessageBus`\n     */\n    close(): void {\n      if (this._unlisten !== null) {\n        this._unlisten();\n      }\n      this._unlisten = null;\n      this._channels = {};\n    }\n\n    /**\n     * Listener on channel\n     * \n     * @param name Channel to listen on\n     * @param listener Callback function\n     */\n    on(name: string|number, listener: Listener): void {\n      var sname = name.toString();\n      if (!this._channelExists(sname)) {\n        this._channels[sname] = [];\n      }\n      this._channels[sname].push(listener);\n    }\n\n    /**\n     * Unlisten from channel\n     * \n     * @param name Channel to unlisten\n     * @param listener Callback function\n     */\n    off(name: string|number, listener: Listener): void {\n      var sname = name.toString();\n      if (this._channelExists(sname)) {\n        let channel = this._channels[sname],\n            index   = channel.indexOf(listener);\n        if (index !== -1) {\n          channel.splice(index, 1);\n        }\n      }\n    }\n\n    /**\n     * Emit a message on a channel\n     * \n     * @param name Channel name\n     * @param payload Message data\n     */\n    emit(name: string|number, payload?: any): void {\n      var sname = name.toString();\n      this._endpoint.postMessage({\n        name:    sname,\n        payload: payload\n      });\n    }\n\n    private _channelExists(name: string): boolean {\n      return this._channels.hasOwnProperty(name);\n    }\n\n    private _onEvent(name: string, payload: any): void {\n      if (this._channelExists(name)) {\n        let listeners = this._channels[name];\n        let length = listeners.length;\n        for (let i = 0; i < length; i++) {\n          listeners[i](payload);\n        }\n      }\n    }\n\n  }\n\n  /**\n   * Factory function for creating a `MessageBus`\n   *\n   * @param endpoint WebWorker endpoint\n   */\n  export function create(endpoint: Endpoint): MessageBus {\n    return new MessageBus(endpoint);\n  }\n}\n"],"sourceRoot":"/source/"}