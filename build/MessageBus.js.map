{"version":3,"sources":["MessageBus.ts"],"names":["MessageBus","MessageBus_1","create","endpoint","_this","this","_channels","_unlisten","_endpoint","onMessage","e","_onEvent","data","name","payload","onError","addEventListener","removeEventListener","prototype","close","on","listener","sname","toString","_channelExists","push","off","channel","index","indexOf","splice","emit","postMessage","hasOwnProperty","_i","_a","length"],"mappings":"AAAA,GAAOA,aAAP,SAAOC,GAoHL,QAAAC,GAAuBC,GACrB,MAAO,IAAIH,GAAWG,GAzGxB,GAAAH,GAAA,WAWE,QAAAA,GAAYG,GAXd,GAAAC,GAAAC,IAEUA,MAAAC,aACAD,KAAAE,UAAwB,KAU9BF,KAAKG,UAAYL,CAEjB,IAAIM,GAAY,SAAAC,GAAK,MAAAN,GAAKO,SAASD,EAAEE,KAAKC,KAAMH,EAAEE,KAAKE,UACnDC,EAAY,SAAAL,GAAK,MAAAN,GAAKO,SAAS,QAASD,GAE5CP,GAASa,iBAAiB,UAAWP,GACrCN,EAASa,iBAAiB,QAASD,GAEnCV,KAAKE,UAAY,WACfJ,EAASc,oBAAoB,UAAWR,GACxCN,EAASc,oBAAoB,QAASF,IA0E5C,MAjEEf,GAAAkB,UAAAC,MAAA,WACyB,OAAnBd,KAAKE,WACPF,KAAKE,YAEPF,KAAKE,UAAY,KACjBF,KAAKC,cASPN,EAAAkB,UAAAE,GAAA,SAAMP,EAAqBQ,GACzB,GAAIC,GAAQT,EAAKU,UACZlB,MAAKmB,eAAeF,KACvBjB,KAAKC,UAAUgB,OAEjBjB,KAAKC,UAAUgB,GAAOG,KAAKJ,IAS7BrB,EAAAkB,UAAAQ,IAAA,SAAIb,EAAqBQ,GACvB,GAAIC,GAAQT,EAAKU,UACjB,IAAIlB,KAAKmB,eAAeF,GAAQ,CAC9B,GAAIK,GAAUtB,KAAKC,UAAUgB,GACzBM,EAAUD,EAAQE,QAAQR,EAC1BO,SACFD,EAAQG,OAAOF,EAAO,KAW5B5B,EAAAkB,UAAAa,KAAA,SAAKlB,EAAqBC,GACxB,GAAIQ,GAAQT,EAAKU,UACjBlB,MAAKG,UAAUwB,aACbnB,KAASS,EACTR,QAASA,KAILd,EAAAkB,UAAAM,eAAR,SAAuBX,GACrB,MAAOR,MAAKC,UAAU2B,eAAepB,IAG/Bb,EAAAkB,UAAAP,SAAR,SAAiBE,EAAcC,GAC7B,GAAIT,KAAKmB,eAAeX,GACtB,IAAqB,GAAAqB,GAAA,EAAAC,EAAA9B,KAAKC,UAAUO,GAAfqB,EAAAC,EAAAC,OAAAF,IAAqB,CAArC,GAAIb,GAAQc,EAAAD,EACfb,GAASP,KAKjBd,IAjGaC,GAAAD,WAAUA,EAwGPC,EAAAC,OAAMA,GApHjBF,aAAAA","file":"MessageBus.js","sourcesContent":["module MessageBus {\n\n  export interface Endpoint {\n    postMessage(message: any, ...params: any[]): void;\n    addEventListener(type: string, listener: (ev: any) => any): any;\n    removeEventListener(type: string, listener: (ev: any) => any): any;\n  }\n\n  export interface Listener<T> {\n    (payload?: T): any;\n  }\n\n  export class MessageBus {\n\n    private _channels: { [name: string]: Array<Listener<any>> } = {};\n    private _unlisten: () => void = null\n    private _endpoint: Endpoint;\n\n    /**\n     * Wrap an `Endpoint` and provide a pubsub interface.\n     *\n     * @param endpoint WebWorker endpoint\n     */\n    constructor(endpoint: Endpoint) {\n\n      this._endpoint = endpoint;\n\n      let onMessage = e => this._onEvent(e.data.name, e.data.payload),\n          onError   = e => this._onEvent(\"error\", e);\n\n      endpoint.addEventListener(\"message\", onMessage);\n      endpoint.addEventListener(\"error\", onError);\n\n      this._unlisten = () => {\n        endpoint.removeEventListener(\"message\", onMessage);\n        endpoint.removeEventListener(\"error\", onError);\n      };\n\n    }\n\n    /**\n     * Remove event listeners from supplied `Endpoint`\n     * Delete all listeners from `MessageBus`\n     */\n    close(): void {\n      if (this._unlisten !== null) {\n        this._unlisten();\n      }\n      this._unlisten = null;\n      this._channels = {};\n    }\n\n    /**\n     * Listener on channel\n     * \n     * @param name Channel to listen on\n     * @param listener Callback function\n     */\n    on<T>(name: string|number, listener: Listener<T>): void {\n      var sname = name.toString();\n      if (!this._channelExists(sname)) {\n        this._channels[sname] = [];\n      }\n      this._channels[sname].push(listener);\n    }\n\n    /**\n     * Unlisten from channel\n     * \n     * @param name Channel to unlisten\n     * @param listener Callback function\n     */\n    off(name: string|number, listener: Listener<any>): void {\n      var sname = name.toString();\n      if (this._channelExists(sname)) {\n        let channel = this._channels[sname],\n            index   = channel.indexOf(listener);\n        if (index !== -1) {\n          channel.splice(index, 1);\n        }\n      }\n    }\n\n    /**\n     * Emit a message on a channel\n     * \n     * @param name Channel name\n     * @param payload Message data\n     */\n    emit(name: string|number, payload?: any): void {\n      var sname = name.toString();\n      this._endpoint.postMessage({\n        name:    sname,\n        payload: payload\n      });\n    }\n\n    private _channelExists(name: string): boolean {\n      return this._channels.hasOwnProperty(name);\n    }\n\n    private _onEvent(name: string, payload: any): void {\n      if (this._channelExists(name)) {\n        for (let listener of this._channels[name]) {\n          listener(payload);\n        }\n      }\n    }\n\n  }\n\n  /**\n   * Factory function for creating a `MessageBus`\n   *\n   * @param endpoint WebWorker endpoint\n   */\n  export function create(endpoint: Endpoint): MessageBus {\n    return new MessageBus(endpoint);\n  }\n}\n"]}